using System;
using System.Xml.Linq;

class Program {
  static void Main() {
    // MY OBJECTS
    Checklist checklist = new Checklist();
    Simple simple = new Simple();
    Eternal eternal = new Eternal();

    // WELCOME MESSAGE
    if (!File.Exists("goals.txt")) File.Create("goals.txt").Close(); //if goals.txt doesn't exist, then create it
    Console.WriteLine("Welcome to Neil's Goal Tracker Program!");
    Console.Write(Environment.NewLine);

    // RUN GOAL TRACKER GAME LOOP
    bool done = false;
    while (!done) {

        // DISPLAY POINTS
        checklist.displayPoints();
        Console.Write(Environment.NewLine);

        // MENU
        Console.WriteLine("\rMenu Options: ");
        Console.WriteLine("\r   1. Create New Goal");
        Console.WriteLine("\r   2. List Goals");
        Console.WriteLine("\r   3. Save Goals");
        Console.WriteLine("\r   4. Load Goals");
        Console.WriteLine("\r   5. Record Event");
        Console.WriteLine("\r   6. Quit");
        Console.WriteLine("\rSelect a choice from the menu: ");
        
        string UserChoice = Console.ReadLine();

        // Create Goal
        if (UserChoice == "1") {
            UserChoice = "0";
            bool goaldone = false;
            while (!goaldone) {
                Console.WriteLine("\rThe types of goals are: ");
                Console.WriteLine("\r   1. Simple");
                Console.WriteLine("\r   2. Eternal");
                Console.WriteLine("\r   3. Checklist");
                Console.WriteLine("\rWhich type of goal Would you like to create? ");

                UserChoice = Console.ReadLine();

                if (UserChoice == "1") {
                    simple.Create();
                    goaldone = true;
                } else if (UserChoice == "2") {
                    eternal.Create();
                    goaldone = true;
                } else if (UserChoice == "3") {
                    checklist.Create();
                    goaldone = true;
                } else {
                    Console.WriteLine("\rPlease input a number associated with the goal!");
                }
            }
        // List Goals
        } else if (UserChoice == "2") {
            simple.displayList();
        // Save Goals
        } else if (UserChoice == "3") {
            simple.Save();
        // Load Goals
        } else if (UserChoice == "4") {
            simple.Load();
        // Record Event
        } else if (UserChoice == "5") {
            eternal.recordEvent();
        // Quit
        } else if (UserChoice == "6") {
            done = true;
            Console.Clear();
            Console.WriteLine("\rQuitting...");
            Environment.Exit(0);
        // Input Correct Number and Try Again
        } else {
            Console.WriteLine("\rPlease input a number from the menu!");
        }
    }
  }
}

using System;

class Simple : Goal {
    public void Create() {
        Console.Clear();
        Console.WriteLine("Now Creating a Simple Goal!");
        string gt = "Simple";
        goalType.Add(gt);

        int bonusTimes = 0;
        toCompleteBonus.Add(bonusTimes);

        int bonusAmount = 0;
        bonuses.Add(bonusAmount);

        int checklistPoop = 0;
        checklistGarbage.Add(checklistPoop);

        goalCompletionStatus.Add(false);

        skip();
        Console.WriteLine("What is the name of your goal? ");
        string goalName = Console.ReadLine(); 
        goals.Add(goalName);

        skip();
        Console.WriteLine("What is a short description of the goal? ");
        string goalDesc = Console.ReadLine(); 
        descriptions.Add(goalDesc);

        skip();
        Console.WriteLine("How many points do you want associated with this goal? ");
        bool done = false;
        int associatedPoints = 0; // Declare the variable outside the loop so it can be used later
        while (!done) {
            if (int.TryParse(Console.ReadLine(), out associatedPoints)) {
                points.Add(associatedPoints);
                done = true;
            } else {
                Console.WriteLine("Invalid input. Please enter a number.");
                skip();
            }
        }

        skip();
        Console.WriteLine("---- Simple Goal Created! ---- ");
        Thread.Sleep(3000);
        Console.Clear();
    }
    public void displayList() {

        // Check if the lists are empty
        if (goals.Count == 0 || descriptions.Count == 0 || points.Count == 0) {
            Console.WriteLine("No goals to display.");
            return;
        }

        Console.Clear();

        // Loop through the goals list using the index
        for (int i = 0; i < goals.Count; i++) {
            string displayGoal = goals[i];
            string displayDescription = descriptions[i];
            int displayPoint = points[i];
            int bulletPoint = (i + 1);
            int bonu = toCompleteBonus[i];
            string typeGoal = goalType[i];

            int poop = checklistGarbage[i];

            string checkmark = " ";
            if (typeGoal == "Simple") {
                checkmark = goalCompletionStatus[i] ? "█" : " ";
            } else if (typeGoal == "Checklist") {
                checkmark = goalCompletionStatus[i] ? " " : " ";
                if (poop == bonu) {
                    checkmark = goalCompletionStatus[i] ? "█" : " ";
                }
            } else if (typeGoal == "Eternal") {
                checkmark = goalCompletionStatus[i] ? " " : " ";
            }

            skip();
            Console.WriteLine($"{bulletPoint}. [{checkmark}] {displayGoal} ({displayDescription}) --- {displayPoint} Points ");
            if (typeGoal == "Checklist") {
                Console.Write($"-- Currently Completed {poop}/{bonu} ");
            }
            
        }
        skip();
        Thread.Sleep(3000);
    }

    public void Save() {
        // Check if any list is empty
        if (goals.Count == 0 || descriptions.Count == 0 || points.Count == 0 || goalType.Count == 0 || bonuses.Count == 0 || toCompleteBonus.Count == 0) {
            Console.WriteLine("There is nothing to save yet!");
            return;
        }
        Console.Clear();

        using (StreamWriter writer = new StreamWriter("goals.txt")) {
            for (int i = 0; i < goals.Count; i++) {
                writer.WriteLine($"{goals[i]}:{descriptions[i]}:{points[i]}:{goalType[i]}:{toCompleteBonus[i]}:{bonuses[i]}:{goalCompletionStatus[i]}:{checklistGarbage[i]}");
            }
            writer.WriteLine("---TOTAL_POINTS---");
            foreach (int totalPoint in _totalPoints) {
                writer.WriteLine(totalPoint);
            }
        }
        
        skip();
        Console.WriteLine("Goals Saved!");
        Console.WriteLine("(saved to goals.txt)");
        skip();
        Thread.Sleep(3000);
    }

    public void Load() {
        Console.Clear();
        if (!File.Exists("goals.txt")) {
            Console.WriteLine("No saved goals found.");
            return;
        }

        // Clear existing lists before loading
        goals.Clear();
        descriptions.Clear();
        points.Clear();
        goalType.Clear();
        toCompleteBonus.Clear();
        bonuses.Clear();
        goalCompletionStatus.Clear();
        checklistGarbage.Clear();
        _totalPoints.Clear();

        using (StreamReader reader = new StreamReader("goals.txt")) {
            string line;
            bool loadingTotalPoints = false;

            while ((line = reader.ReadLine()) != null) {
                if (line == "---TOTAL_POINTS---") {
                    loadingTotalPoints = true;
                    continue;
                }

                if (!loadingTotalPoints) {
                    // Load goal data
                    string[] parts = line.Split(':');
                    if (parts.Length == 8) {  // Adjusted to 8 to match the saved format
                        goals.Add(parts[0]);                 // Goal name
                        descriptions.Add(parts[1]);          // Goal description
                        points.Add(int.Parse(parts[2]));     // Goal points
                        goalType.Add(parts[3]);              // Goal type
                        toCompleteBonus.Add(int.Parse(parts[4])); // Bonus completion times
                        bonuses.Add(int.Parse(parts[5]));    // Bonus amount
                        goalCompletionStatus.Add(bool.Parse(parts[6])); // Completion status (bool)
                        checklistGarbage.Add(int.Parse(parts[7])); // Checklist garbage (int)
                    }
                } else {
                    // Load _totalPoints
                    if (int.TryParse(line, out int totalPoint)) {
                        _totalPoints.Add(totalPoint);
                    }
                }
            }
        }

        Console.WriteLine("Goals Loaded Successfully.");
        skip();
        Thread.Sleep(3000);
    }
}

using System;
using System.Numerics;

class Eternal : Goal {
    public void Create() {
        Console.Clear();
        Console.WriteLine("Now Creating an Eternal Goal!");
        string gt = "Eternal";
        goalType.Add(gt);

        int bonusTimes = 0;
        toCompleteBonus.Add(bonusTimes);

        int bonusAmount = 0;
        bonuses.Add(bonusAmount);

        int checklistPoop = 0;
        checklistGarbage.Add(checklistPoop);

        goalCompletionStatus.Add(false);

        skip();
        Console.WriteLine("What is the name of your goal? ");
        string goalName = Console.ReadLine(); 
        goals.Add(goalName);

        skip();
        Console.WriteLine("What is a short description of the goal? ");
        string goalDesc = Console.ReadLine(); 
        descriptions.Add(goalDesc);

        skip();
        Console.WriteLine("How many points do you want associated with this goal? ");
        bool done = false;
        int associatedPoints = 0; // Declare the variable outside the loop so it can be used later
        while (!done) {
            if (int.TryParse(Console.ReadLine(), out associatedPoints)) {
                points.Add(associatedPoints);
                done = true;
            } else {
                Console.WriteLine("Invalid input. Please enter a number.");
                skip();
            }
        }

        skip();
        Console.WriteLine("---- Eternal Goal Created! ---- ");
        Thread.Sleep(3000);
        Console.Clear();
    }
    public void recordEvent() {
        skip();
        // Check if the lists are empty
        if (goals.Count == 0 || descriptions.Count == 0 || points.Count == 0) {
            Console.WriteLine("No goals to display.");
            return;
        }
        Console.WriteLine("The Goals Are: ");

        // Loop through the goals list using the index
        for (int i = 0; i < goals.Count; i++) {
            string displayGoal = goals[i];
            int bulletPoint = (i + 1);
            string typeGoal = goalType[i];
            int bonu = toCompleteBonus[i];
            int poop = checklistGarbage[i];

            string checkmark = " ";
            if (typeGoal == "Simple") {
                checkmark = goalCompletionStatus[i] ? "█" : " ";
            } else if (typeGoal == "Checklist") {
                checkmark = goalCompletionStatus[i] ? " " : " ";
                if (poop == bonu) {
                    checkmark = goalCompletionStatus[i] ? "█" : " ";
                }
            } else if (typeGoal == "Eternal") {
                checkmark = goalCompletionStatus[i] ? " " : " ";
            }
            Console.WriteLine($"{bulletPoint}. [{checkmark}] {displayGoal}");
        }

        bool done = false;
        while (!done) {
            bool isCompleted = false;
            Console.WriteLine("Which goal did you complete? ");
            string choice = Console.ReadLine();
            // Attempt to convert the string to an integer
            int goalIndex;
            if (int.TryParse(choice, out goalIndex)) {
                Console.WriteLine($"You chose goal number {goalIndex}");
                for (int i = 0; i < goals.Count; i++) {
                    int bulletPoint = (i + 1);
                    int displayPoint = points[i];
                    string typeGoal = goalType[i];
                    int cermp = toCompleteBonus[i];
                    if (goalIndex == bulletPoint) {
                        isCompleted = true;
                        // mark checkmark
                        goalCompletionStatus[i] = true;
                        //add points to scoreboard
                        _totalPoints.Add(displayPoint);
                        //tier up one checklist number
                        if (typeGoal == "Checklist") {
                            checklistGarbage[i] += 1;
                            int cg = checklistGarbage[i];
                            if (cg == cermp) {
                                _totalPoints.Add(bonuses[i]);
                                Console.WriteLine("You Earned A Bonus! ");
                            }
                        }
                    }
                    if (isCompleted) {
                        done = true;
                    }
                }
                if (!isCompleted) {
                    Console.WriteLine("Invalid input. Please enter a valid number.");
                }
            } else {
                // Invalid input
                Console.WriteLine("Invalid input. Please enter a valid number.");
            }
        }
    }
}

using System;
using System.ComponentModel;

class Checklist : Goal {
    public void Create() {
        Console.Clear();
        Console.WriteLine("Now Creating a Checklist Goal!");
        string gt = "Checklist";
        goalType.Add(gt);
        skip();

        goalCompletionStatus.Add(false);

        int checklistPoop = 0;
        checklistGarbage.Add(checklistPoop);

        Console.WriteLine("What is the name of your goal? ");
        string goalName = Console.ReadLine(); 
        goals.Add(goalName);
        skip();

        Console.WriteLine("What is a short description of the goal? ");
        string goalDesc = Console.ReadLine(); 
        descriptions.Add(goalDesc);
        skip();

        Console.WriteLine("How many points do you want associated with this goal? ");
        bool done = false;
        int associatedPoints = 0; // Declare the variable outside the loop so it can be used later
        while (!done) {
            if (int.TryParse(Console.ReadLine(), out associatedPoints)) {
                points.Add(associatedPoints);
                done = true;
            } else {
                Console.WriteLine("Invalid input. Please enter a number.");
                skip();
            }
        }


        skip();
        Console.WriteLine("How many times does this goal need to be accomplished for a bonus? ");
        int bonusTimes = 0;
        done = false;
        while (!done) {
            if (int.TryParse(Console.ReadLine(), out bonusTimes)) {
                toCompleteBonus.Add(bonusTimes);
                done = true;
            } else {
                Console.WriteLine("Invalid input. Please enter a number.");
                skip();
            }
        }
        skip();
        Console.WriteLine("What is the bonus for accomplishing it that many times?");
        int bonusAmount = 0;
        done = false;
        while (!done) {
            if (int.TryParse(Console.ReadLine(), out bonusAmount)) {
                bonuses.Add(bonusAmount);
                done = true;
            } else {
                Console.WriteLine("Invalid input. Please enter a number.");
                skip();
            }
        }
        skip();


        Console.WriteLine("---- Checklist Goal Created! ---- ");
        Thread.Sleep(3000);
        Console.Clear();
    }
    public void displayPoints() {
        int totalPoints = 0;
        for (int i = 0; i < _totalPoints.Count; i++) {
            int addingPoints = _totalPoints[i];
            totalPoints = addingPoints + totalPoints;
        }
        Console.WriteLine($"You have {totalPoints} Points");
    }


}
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading;

class Goal {
    // ------ ATTRIBUTES -------
    protected static List<int> points = new List<int>();
    protected static List<string> goals = new List<string>();
    protected static List<string> descriptions = new List<string>();
    protected static List<string> goalType = new List<string>();

    protected static List<int> bonuses = new List<int>();
    protected static List<int> toCompleteBonus = new List<int>();
    protected static List<bool> goalCompletionStatus = new List<bool>();
    protected static List<int> checklistGarbage = new List<int>(); //This is a stupid tier up checklist thing that was super annoying to make

    protected static List<int> _totalPoints = new List<int>(); //scoreboard points


    // ------ METHODS ------
    //creates a new line so i don't have to keep typing that massive line of code
    protected void skip() {
        Console.WriteLine(Environment.NewLine);
    }
}
